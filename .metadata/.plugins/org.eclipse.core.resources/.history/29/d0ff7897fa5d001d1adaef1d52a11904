package com.mestra.vaga.api.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.mestra.vaga.domain.model.Vaga;
import com.mestra.vaga.domain.service.ScrappingVaga;

@RestController
@RequestMapping("/vagas")
public class VagaController {

	@Autowired
	private ScrappingVaga scrappingVaga;

	// http://domain.com/vagas/parametro
	// http://domain.com/vagas?pesquisa=desenvolvedor

	@GetMapping
	public StringBuilder findVagas(@RequestParam String pesquisa) throws JsonProcessingException {
		List<Vaga> vagas = scrappingVaga.findVagas(pesquisa);

		/*
		 * String vagaStr = "";
		 * 
		 * for (Vaga vaga: vagas) { vagaStr += vaga.toString(); }
		 * 
		 * return vagaStr;
		 */

		/*
		// Create ObjectMapper object.
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.INDENT_OUTPUT);

        List < String > progLangs = new ArrayList < > ();
        progLangs.add("C");
        progLangs.add("C++");
        progLangs.add("Java");
        progLangs.add("Java EE");
        progLangs.add("Python");
        progLangs.add("Scala");
        progLangs.add("JavaScript");
        // Serialize Object to JSON.
        String json = mapper.writeValueAsString(progLangs);

        // Print json
        System.out.println(json);
        */
		
		StringBuilder vagasBuilder = new StringBuilder();
		
		vagasBuilder.append("[");
		for (Vaga vaga: vagas) {
			vagasBuilder.append(vaga.toString());
		}
		vagasBuilder.append("]");


		return vagasBuilder;

		/*
		 * StringBuilder str = new StringBuilder(); str.append(String.valueOf(vagas));
		 * 
		 * JSONObject jsonObject= new JSONObject(vagaStr);
		 * 
		 * 
		 * Gson gson = new Gson(); String json = gson.toJson(vagas);
		 * 
		 * ModelAndView modelAndView = new ModelAndView(); modelAndView.addObject(json);
		 */

	}

}
